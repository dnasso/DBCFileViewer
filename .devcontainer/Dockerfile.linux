# Dockerfile.linux
FROM debian:trixie-slim AS builder

ARG DEBIAN_FRONTEND=noninteractive
ARG QT_VERSION=6.8.3
ENV TZ=America/Chicago

ENV DISPLAY=:0
ENV QT_QPA_PLATFORM=xcb

# Install basic dependencies and Python for aqtinstall
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    locales \
    bash \
    cmake \
    ninja-build \
    git \
    python3 \
    python3-pip \
    libgl1-mesa-dev \
    libxkbcommon-dev \
    libxcb-xinerama0 \
    libxcb-cursor0 \
    libxcb-icccm4 \
    libxcb-image0 \
    libxcb-keysyms1 \
    libxcb-randr0 \
    libxcb-render-util0 \
    libxcb-shape0 \
    libxcb-sync1 \
    libxcb-xfixes0 \
    libfontconfig1 \
    libdbus-1-3 \
    libglib2.0-0 \
    wget \
    xz-utils \
    && locale-gen en_US.UTF-8 \
    && rm -rf /var/lib/apt/lists/* /var/cache/apt/archives/* /tmp/* /var/tmp/*

# Use the default GCC from the base image to ensure runtime glibc compatibility

FROM builder AS qt-builder

ARG USERNAME=vscode
ARG USER_UID=1000
ARG USER_GID=$USER_UID

# Create user, add to groups, and grant sudo
RUN apt-get update && apt-get install -y sudo && \
    groupadd --gid $USER_GID $USERNAME || true && \
    useradd --uid $USER_UID --gid $USER_GID -m $USERNAME && \
    usermod -aG audio,video,sudo $USERNAME && \
    echo $USERNAME ALL=\(root\) NOPASSWD:ALL > /etc/sudoers.d/$USERNAME && \
    chmod 0440 /etc/sudoers.d/$USERNAME

# Install Qt 6.8.3 using aqtinstall
RUN pip3 install --break-system-packages --no-cache-dir aqtinstall && \
    aqt install-qt linux desktop ${QT_VERSION} linux_gcc_64 --outputdir /Qt -m qtcharts qtnetworkauth && \
    # Remove Qt documentation, examples, and other unnecessary files
    rm -rf /Qt/Docs /Qt/Examples /Qt/${QT_VERSION}/Docs /Qt/${QT_VERSION}/Examples && \
    rm -rf /Qt/${QT_VERSION}/gcc_64/doc /Qt/${QT_VERSION}/gcc_64/examples && \
    # Remove unnecessary Qt translations (keep only en)
    find /Qt/${QT_VERSION}/gcc_64/translations -type f ! -name '*_en*' -delete 2>/dev/null || true && \
    echo "=== Qt installation complete ===" && \
    ls -la /Qt/ && \
    ls -la /Qt/${QT_VERSION}/ && \
    find /Qt -name "Qt6Config.cmake" && \
    echo "=== End of Qt verification ==="

# Set locale environment
ENV LANG=en_US.UTF-8 \
    LANGUAGE=en_US:en \
    LC_ALL=en_US.UTF-8

ENV QT_DIR="/Qt/${QT_VERSION}/gcc_64"
ENV PATH="${QT_DIR}/bin:${PATH}"
ENV QT_PLUGIN_PATH="${QT_DIR}/plugins"
ENV QML_IMPORT_PATH="${QT_DIR}/qml"
ENV LD_LIBRARY_PATH="${QT_DIR}/lib"
ENV CMAKE_PREFIX_PATH="${QT_DIR}/lib/cmake"
ENV Qt6_DIR="${QT_DIR}/lib/cmake/Qt6"

WORKDIR /src
COPY . .

# Configure and build with size optimizations
RUN cmake -B build -G Ninja \
    -DCMAKE_BUILD_TYPE=RelWithDebInfo \
    -DCMAKE_INSTALL_PREFIX=/app && \
    cmake --build build --parallel && \
    cmake --install build && \
    # Strip debug symbols from the executable to reduce size
    strip --strip-all /app/bin/appDBC_Parser && \
    # Remove any .so files we don't need from /app
    find /app -name "*.a" -delete && \
    find /app -name "*.la" -delete

# Collect Qt runtime libraries
RUN mkdir -p /qt-runtime/lib /qt-runtime/plugins /qt-runtime/qml && \
    # Copy only the libraries that are actually needed
    ldd /app/bin/appDBC_Parser | grep "=> /" | awk '{print $3}' | xargs -I '{}' sh -c 'cp -v {} /qt-runtime/lib/ 2>/dev/null || true' && \
    # Copy Qt6 libraries from Qt installation (includes XcbQpa and other plugin dependencies)
    find ${QT_DIR}/lib -name "libQt6*.so.*" -exec cp -v {} /qt-runtime/lib/ \; && \
    # Also copy xcb-cursor explicitly (Qt 6.5+ requirement)
    find /usr/lib /lib -name "libxcb-cursor.so*" -exec cp -v {} /qt-runtime/lib/ \; 2>/dev/null || true && \
    # Copy ICU libraries (needed by Qt)
    find ${QT_DIR}/lib -name "libicu*.so.*" -exec cp -v {} /qt-runtime/lib/ \; 2>/dev/null || true && \
    # Strip debug symbols from Qt libraries
    find /qt-runtime/lib -name "*.so*" -type f -exec strip --strip-unneeded {} \; 2>/dev/null || true && \
    # Copy Qt plugins (including all xcb-related)
    cp -r ${QT_DIR}/plugins/platforms /qt-runtime/plugins/ && \
    cp -r ${QT_DIR}/plugins/platformthemes /qt-runtime/plugins/ && \
    cp -r ${QT_DIR}/plugins/xcbglintegrations /qt-runtime/plugins/ 2>/dev/null || true && \
    cp -r ${QT_DIR}/plugins/imageformats /qt-runtime/plugins/ && \
    # Strip plugins
    find /qt-runtime/plugins -name "*.so" -type f -exec strip --strip-unneeded {} \; 2>/dev/null || true && \
    # Copy QML modules
    cp -r ${QT_DIR}/qml/QtQuick /qt-runtime/qml/ 2>/dev/null || true && \
    cp -r ${QT_DIR}/qml/QtQml /qt-runtime/qml/ 2>/dev/null || true && \
    cp -r ${QT_DIR}/qml/QtQuick.Controls /qt-runtime/qml/ 2>/dev/null || true && \
    cp -r ${QT_DIR}/qml/Qt /qt-runtime/qml/ 2>/dev/null || true && \
    # Strip QML plugins
    find /qt-runtime/qml -name "*.so" -type f -exec strip --strip-unneeded {} \; 2>/dev/null || true


# Runtime image
FROM debian:bookworm-slim AS slimmed-runtime

ARG DEBIAN_FRONTEND=noninteractive

ENV TZ=America/Chicago

ARG USERNAME=vscode
ARG USER_UID=1000
ARG USER_GID=$USER_UID

# Create user, add to groups, and grant sudo
RUN apt-get update && apt-get install -y sudo && \
    groupadd --gid $USER_GID $USERNAME || true && \
    useradd --uid $USER_UID --gid $USER_GID -m $USERNAME && \
    usermod -aG audio,video,sudo $USERNAME && \
    echo $USERNAME ALL=\(root\) NOPASSWD:ALL > /etc/sudoers.d/$USERNAME && \
    chmod 0440 /etc/sudoers.d/$USERNAME

# Install only runtime dependencies (no build tools, no Python)
# Need libgl1, libopengl0, libglx0, libegl1 for Qt OpenGL support
RUN apt-get update && apt-get install -y --no-install-recommends \
    bash \
    locales \
    libgl1 \
    libopengl0 \
    libglx0 \
    libegl1 \
    libxkbcommon0 \
    libxkbcommon-x11-0 \
    libxcb-xinerama0 \
    libxcb-cursor0 \
    libxcb-icccm4 \
    libxcb-image0 \
    libxcb-keysyms1 \
    libxcb-randr0 \
    libxcb-render-util0 \
    libxcb-shape0 \
    libxcb-sync1 \
    libxcb-xfixes0 \
    libfontconfig1 \
    libdbus-1-3 \
    libglib2.0-0 \
    libfreetype6 \
    libx11-6 \
    libx11-xcb1 \
    libxcb1 \
    libxrender1 \
    libxi6 \
    # Kerberos GSSAPI runtime (provides libgssapi_krb5.so.2)
    libkrb5-3 \
    # GSSAPI compatibility library providing libgssapi_krb5.so.2
    libgssapi-krb5-2 \
    libstdc++6 \
    libgcc-s1 \
    && locale-gen en_US.UTF-8 \
    && rm -rf /var/lib/apt/lists/* /var/cache/apt/archives/* /tmp/* /var/tmp/*


# Set locale environment
ENV LANG=en_US.UTF-8 \
    LANGUAGE=en_US:en \
    LC_ALL=en_US.UTF-8

# Copy only Qt runtime files from builder
COPY --from=qt-builder /qt-runtime /opt/qt

# Copy built application
COPY --from=qt-builder /app /app

# Prune unneeded Qt plugins and QML modules to reduce image size.
# Keep the platform plugin (xcb), imageformats, xcbglintegrations and the QML modules
# actually used by the app (QtQuick, QtQml, QtQuick.Controls, Layouts, Dialogs, Material).
RUN set -eux; \
    echo "Pruning Qt runtime: removing unnecessary plugins and QML modules"; \
    for p in /opt/qt/plugins/*; do \
        case "$(basename "$p")" in \
            platforms|imageformats|xcbglintegrations|iconengines) echo "keep $p" ;; \
            *) rm -rf "$p" || true; echo "rm $p" ;; \
        esac; \
    done; \
    for q in /opt/qt/qml/*; do \
        case "$(basename "$q")" in \
            QtQuick|QtQml|Qt|QtQuick.Controls|QtQuick.Layouts|QtQuick.Dialogs|QtQuick.Controls.Material|QtQuick.Templates|QtQuick.Window|QtQuick.Layouts) echo "keep $q" ;; \
            *) rm -rf "$q" || true; echo "rm $q" ;; \
        esac; \
    done; \
    # Remove any leftover documentation and cmake files in the runtime
    rm -rf /opt/qt/doc /opt/qt/docs /opt/qt/lib/cmake || true

# Set up environment
ENV QT_PLUGIN_PATH="/opt/qt/plugins"
ENV QML_IMPORT_PATH="/opt/qt/qml"
ENV LD_LIBRARY_PATH="/opt/qt/lib:/usr/lib/x86_64-linux-gnu"
ENV QT_QPA_PLATFORM=xcb
ENV DISPLAY=:0

# Performance optimizations for GUI rendering
# Enable hardware acceleration and disable debug plugins
ENV QT_XCB_GL_INTEGRATION=xcb_glx
ENV QT_QUICK_BACKEND=opengl
ENV LIBGL_ALWAYS_INDIRECT=0
ENV QSG_RENDER_LOOP=basic
ENV QSG_INFO=1

WORKDIR /app/bin
#CMD ["/app/bin/appDBC_Parser"]
ENTRYPOINT ["/app/start_app.sh"]